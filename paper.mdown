// spa

node
Javascript作为一门脚本语言，很多人对其产生了误区，认为它只是能应用于前端开发，并不能应用于服务器开发。然而其实相比j2ee，asp.net，python等这类语言，Javascript是一门专门为web而生的语言，它从一开始
便被赋予了开发服务器的能力。只是因为当时没有高效的引擎，javascript性能问题极大，因而它在服务器端的开发便无人问津。直到Google V8引擎的出现，为Javascript提供了质的飞越，性能远超过其他脚本语言，于是美国人Ryan Dahl利用V8引擎打造了Node平台。Node基于事件驱动的模型，异步IO框架，为开发高并发，高性能后端服务程序上提供了极大的优势。
在短短的两三年时间内，Node取得了巨大的成功。在Github上Node高居第二，基于node开发的服务器框架如express，koa，socket.io等也都具有极高的排名。而Node本身在主流操作系统上（windows，OS X，Linux）上都极易配置，减轻开发者跨平台的烦恼，吸引了极多的开发者为其开发提供第三方扩展模块(npm)，截止目前，npm数量已经高达三十万之多。
在国外node应用已经越来越广泛，且已经趋于成熟。著名IT公司LinkedIn的移动平台已经全部从Ruby迁移到Node，这让其服务器数量大大缩减。硅谷有超过50%的创业公司，选择用Node来开发自己的门户网站。
然而Node在国内虽然有上涨趋势，却明显没有普及开来。国内阿里巴巴，网易，腾讯，百度等公司已经有很多线上产品采取Node开发，却并未被人熟知。但有理由相信Node将在未来几年内具有更大的影响力。
本项目的服务器采用的即为Node。选择Node的原因，一是因为对于前端开发者，能用JS开发后台具有无可比拟的吸引力；二是因为Node是国外已经成型的并且注定将发扬的技术，我个人希望能在Node方面有更深的探索；三是因为Node已经有数目极多的第三方扩展模块，合理的利用这些模块，结合Node本身的优势，可以对项目的后台性能提供强力保证。

express
Node本身提供了Javascript开发后台的能力，与php不同，Node自带服务器，不在需要apache等配置。然而直接使用Node开发后台并不是一个好选择。Node以CommonJS作为基础，其函数更贴近底层，代码量较多，对于新手来说出错率高。因而开发者们更多会采取框架来进行后台开发。这里的框架，意义上更类似Java的中间件。本项目中采用的是MEAN架构中的E，即Express.js。
Express作为Node上的web框架，它正如官网介绍的一样，精简，灵活。精简在于它将底层CommonJS的接口进行了封装，更容易简单操作，而且鲁棒性较高；灵活在于Express并不是一个完全封闭的框架，你仍可以根据自己的项目，修改Express的配置，或者引入新的模块。你无需在使用Express之前，砍掉所有你不需要的功能，而是你在需要的时候再引入配置。这是模块化在项目开发中的优势。
我们将在后面的代码中详细陈述本项目中用到的Express配置。



angular
AngularJS是一款来自Google的前端JS框架，是基于JQuery的二次开发，但相比传统的前端JS框架如JQuery，dojo等，AngularJs的核心理念已经弃用了前端开发者固有的DOM的概念，将web开发中的热门理念MVC引入进前端开发，在我个人认为是前端开发中具有划时代意义的伟大作品。同时AngularJS框架本身也是通过TDD(测试驱动开发)来开发的，成功证实了TDD开发的可靠性，也解决了前端开发难以编写单元测试这一巨大难题。
我个人经历了从JQuery的DOM转换到AngularJS的MVC开发中的“痛苦”历程。然而真正了解并熟知AngularJS，会发现AngularJS中很多特性极大规范化了前端开发，并使得整个前端代码变得条理清晰，提高易读性。
Angular的核心特性包括：
MVC：对于代码不同区块，定义作用域（scope），scope存储操作数据，作为MVC中的model，结合视图层的指令实现数据的展示（view），该作用域内所有的操作scope数据变动的代码为控制器（controller）。
自动化数据双向绑定：与DOM操作不同，DOM获取视图层的数据需要单独操作，数据改变后刷新视图层也需要DOM过程。然而AngularJS实现了数据的双向绑定，视图层数据的更改，将直接影响到scope内的数据，无需重新获取，同理scope内的数据改变也将直接刷新视图层。这一优势将在数据库操作过程中极大展现。
语义化标签：HTML5支持扩展属性，这一优势在AngularJS中获得了极大发挥。AngularJS定义了很多自定义标签，这些标签将HTML中的DOM元素富应用化，赋予了更多功能，除了扩展model内数据在视图层的展示方式外，更实现了非入侵化的Javascript，加强了HTML的语义化，加强网站的SEO。
依赖注入：依赖注入是MVC开发的一个经典概念，在AngularJS中获得了极大发挥。AngularJS的核心推崇前端代码的模块化，各代码在自己的领域“各司其职”，不应该去做其他冗余的操作。在Controller层更应该注意这一点：controller的职责去负责数据的操作（比如从服务器拉取数据，推送数据等）。而如果涉及到某些代码状态的变动，或者某些计算过程，这类代码放在controller中将大大破坏前端代码的结构。因而解决方案是将这类代码提取出来，单独作为一个服务。在涉及到这些操作的地方，将服务注入进去。这样做可以极大的减少代码耦合度，规范代码管理。

除上述外，由于我们做的是SPA应用，项目实际还用到了AngularJS的路由，工厂模式等等特性。所有这些我们将在核心代码解析处进行详细说明。

mongoose
在项目中，针对数据库，我们采取mongodb作为解决方案，作为nosql的典型代表，mongodb并没有严格的关系等来限制数据格式，采取轻量级的json作为存储document的方案，结构更加灵活，容易操作。而使用CommonJS的原生函数来操控mongodb中的数据，显然会增加代码的难度，易读性更差，很难做到低耦合，并不是项目中一个好的解决方案，因而我们采取封装更好的第三方node扩展模块——mongoose来作为我们操作数据库的ODM，来处理所有数据库的CRUD。
nosql因为没有关系型数据库的严谨的数据结构，虽然提供了灵活的数据结构去操作，却也因此牺牲了性能，因而采用mongoose的另一个原因，就是mongoose在mongodb的操作上的优化，使得它受到很高的评价:单用数据库的查询来举例，mongoose就提供了find()，findOne()，findById()三个函数，为不同的场景提供API接口。这些丰富易读的接口不但大大简化了mongodb的操作上的难题，更是针对mongodb的性能短板加强了算法优化。
在mongoose的官网上我们可以轻松查到mongoose的相关API文档，并附有代码示例，这让我们更容易去简易上手这个扩展模块。
但是在项目代码的实际编写中，mongoose仍有一些误区会让新手感到困惑，比如单独通过mongo shell创建的数据并不能在mongoose中查询到；mongoose在嵌套查询中导致的Callback Hell问题；某些API在参数不同情况下导致的返回对象差异导致的非预期结果等。这些问题我们将在一一在后面的讨论或代码中陈述解决方案。


其他核心技术
1. Bootstrap
Bootstrap是一款来自Twitter的著名前端开源工具包。他集成了丰富的UI库以及前端组件，简洁大方，并融入了响应式设计，大大减轻了前端开发中前端页面布局设计的难题。在本项目中我们采取Bootstrap作为我们的UI库。当然UI库并不局限于Bootstrap，其他优秀UI库如Angular Material，IONIC等也同样适用于本项目。完全由开发者审美以及项目需要决定。

2. bower
bower是一款控制前端依赖的工具。在项目中使用或者需要发布前端依赖，通过bower来操作可以变得更简单容易。在本项目中用到了如Bootstrap，AngularJS，JQuery，以及AngularJS指令相关等前端依赖文件，都通过bower来控制。相关bower配置将在后面给出。

3. gulp
gulp是一款基于Node.js创建的javascript自动化构建工具，通过gulp可以设定任务，利用Node.js流的概念，减少频繁的IO操作，实现代码的自动化管理。在本项目的gulp配置中，我们设定了压缩Javascript文件，压缩CSS文件，前端依赖自动化拷贝，冗余代码文件清理等任务。我们还用gulp设定了nodemon和livereload任务，nodemon用于监听后台文件的修改并自动重启服务器，livereload用于监听前端文件的修改并刷新浏览器。这两项任务的配合，可以使得你修改文件后即可瞬时看到代码效果，无需自己手动重启服务器。在后面我们将详尽阐述gulp任务的代码。

4. jade
jade是一款基于Node的前端模板引擎。Node流的概念希望所有文档经过流输入，处理后再通过流输出，对于前端文件也是如此，Jade便是Node在前端模板上的突破。使用Jade将无需写冗余的HTML，Jade将HTML中的dom元素控制为精简的标签，使用缩进来控制嵌套，并且在复用上拥有极大的优势。Express的视图引擎也是默认使用Jade。Jade的语法跟Emmet相近，极易上手，因而本项目采用Jade作为模板引擎。

5. bluebird
Bluebird是一款优秀的promise库。前面在mongoose的介绍中，我们提到嵌套操作导致的Callback Hell问题，解决该问题的一种方案便是使用promise。promise使得复杂的回调函数简化为链式操作，代码易读性更高，更容易维护。然而promise虽然能在代码层面上解决Callback Hell问题，却没能解决Callback Hell导致的性能问题。Bluebird即一款优秀的Promise库，它针对该问题做出了优化，在众多Promise库中性能表现最为出色，API简单易懂。本项目中采用Bluebird集中处理Callback Hell问题，将在后面给出代码示例。

6. mocha
mocha是基于Node的针对Javascript的单元测试平台。Javascript的很多特性导致了编写单元测试代码的难度的提升。Mocha本身支持expect，assert，should等断言库，语法更贴近自然语言，使得Javascript的单元测试代码编写难度大大降低，易读性提高。值得推荐的是Mocha并不是只能做后台Node的单元测试，它的语法是针对Javascript的，因而前端单元测试的编写也可以完全使用Mocha作为平台。Mocha更有众多的工具配合，比如可以与istanbul来审查单元测试的覆盖度。

7. git
git是一款分布式代码控制工具。本项目的代码仓库部署在github上并且开源，所有代码的更新以及分支操作都是用git来完成。git的详细操作在官网上有详细的文档，在这里我们不在赘述。

